package com.example.criminalintentimport android.content.Contextimport android.os.Bundleimport android.util.Logimport android.view.*import android.widget.Buttonimport android.widget.ImageViewimport android.widget.TextViewimport androidx.fragment.app.Fragmentimport androidx.lifecycle.Observerimport androidx.lifecycle.ViewModelProviderimport androidx.recyclerview.widget.DiffUtilimport androidx.recyclerview.widget.LinearLayoutManagerimport androidx.recyclerview.widget.ListAdapterimport androidx.recyclerview.widget.RecyclerViewimport java.text.DateFormatimport java.text.SimpleDateFormatimport java.util.*private const val TAG = "CrimeListFragment"class CrimeListFragment : Fragment() {    private lateinit var noCrimesTv: TextView    private lateinit var addCrimeBtn: Button    interface Callbacks {        fun onCrimeSelected(crimeId: UUID)    }    private var callbacks: Callbacks? = null    private lateinit var crimeRecycleView: RecyclerView    private val crimeListViewModel: CrimeListViewModel by lazy {        ViewModelProvider(this).get(CrimeListViewModel::class.java)    }    private var crimeAdapter: CrimeAdapter = CrimeAdapter()    companion object {        fun newInstance(): CrimeListFragment {            return CrimeListFragment()        }    }    override fun onAttach(context: Context) {        super.onAttach(context)        callbacks = (context as? Callbacks) ?: throw RuntimeException("Need implementation")        Log.d(TAG, "OnAttach")    }    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setHasOptionsMenu(true)    }    override fun onCreateView(        inflater: LayoutInflater,        container: ViewGroup?,        savedInstanceState: Bundle?    ): View? {        Log.d(TAG, "OnCreateView")        val view = inflater.inflate(R.layout.fragment_crime_list, container, false)        noCrimesTv = view.findViewById(R.id.crime_list_no_crime_tv)        addCrimeBtn = view.findViewById(R.id.crime_list_add_crime_btn)        crimeRecycleView = view.findViewById(R.id.crime_list_recycler_view)        crimeRecycleView.layoutManager = LinearLayoutManager(context)        crimeRecycleView.adapter = crimeAdapter        return view    }    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {        super.onViewCreated(view, savedInstanceState)        Log.d(TAG, "OnViewCreated")        crimeListViewModel.crimeListLiveData.observe(viewLifecycleOwner, Observer { crimes ->            crimes?.let {                Log.i(TAG, "Got crimes ${crimes.size}")                updateUi(crimes)            }        })    }    override fun onStart() {        super.onStart()        addCrimeBtn.setOnClickListener {            val crime = Crime()            crimeListViewModel.addCrime(crime)            callbacks?.onCrimeSelected(crime.id)        }    }    override fun onDetach() {        super.onDetach()        Log.d(TAG, "OnDetach")        callbacks = null    }    override fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {        super.onCreateOptionsMenu(menu, inflater)        inflater.inflate(R.menu.fragment_crime_list, menu)    }    override fun onOptionsItemSelected(item: MenuItem): Boolean {        return if (item.itemId == R.id.new_crime_action) {            addCrimeBtn.performClick()            true        } else {            super.onOptionsItemSelected(item)        }    }    private fun updateUi(crimes: List<Crime>) {        crimeAdapter.submitList(crimes)        if (crimes.isEmpty()) {            noCrimesTv.visibility = View.VISIBLE;            addCrimeBtn.visibility = View.VISIBLE;            crimeRecycleView.visibility = View.GONE        } else {            noCrimesTv.visibility = View.GONE;            addCrimeBtn.visibility = View.GONE;            crimeRecycleView.visibility = View.VISIBLE        }    }    private inner class CrimeHolder(itemView: View) :        RecyclerView.ViewHolder(itemView),        View.OnClickListener {        private lateinit var crime: Crime        private val titleTv: TextView = itemView.findViewById(R.id.crime_title_tv)        private val dateTv: TextView = itemView.findViewById(R.id.crime_date_tv)        private val solvedImg: ImageView = itemView.findViewById(R.id.crime_solved_img)        init {            itemView.setOnClickListener(this)        }        fun bind(crime: Crime) {            this.crime = crime            titleTv.text = crime.title            val dateString = DateFormat.getDateInstance(DateFormat.LONG).format(crime.date)            dateTv.text = dateString            solvedImg.visibility = if (crime.isSolved) {                View.VISIBLE            } else {                View.GONE            }            val resolvedString = if (crime.isSolved) {                getString(R.string.crime_resolved)            } else {                getString(R.string.crime_unresolved)            }            itemView.contentDescription = getString(                R.string.crime_item_description,                crime.title, dateString, resolvedString            )        }        override fun onClick(p0: View?) {            callbacks?.onCrimeSelected(crime.id)        }    }    private inner class CrimeDiffUtil : DiffUtil.ItemCallback<Crime>() {        override fun areItemsTheSame(oldItem: Crime, newItem: Crime): Boolean = (oldItem.id == newItem.id)        override fun areContentsTheSame(oldItem: Crime, newItem: Crime): Boolean =            (oldItem.title == newItem.title && oldItem.isSolved == newItem.isSolved)    }    private inner class CrimeAdapter : ListAdapter<Crime, CrimeHolder>(CrimeDiffUtil()) {        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): CrimeHolder {            val view = layoutInflater.inflate(R.layout.list_item_crime, parent, false)            return CrimeHolder(view)        }        override fun onBindViewHolder(holder: CrimeHolder, position: Int) {            val crime: Crime = getItem(position)            holder.bind(crime)        }    }}